[{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/testfile.html","id":"first-title","dir":"Articles","previous_headings":"","what":"First title","title":"testfile","text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/testfile.html","id":"second-title","dir":"Articles","previous_headings":"First title","what":"Second title","title":"testfile","text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/testfile.html","id":"third-title","dir":"Articles","previous_headings":"First title > Second title","what":"Third title","title":"testfile","text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor hendrerit vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Tidy photometer data with `tidy_plates()`","text":"installing R, install microdiluteR package either via CRAN install development version via GitHub using following commands: microdiluteR package can loaded follows:","code":"# via CRAN install.packages(\"microdiluteR\") # via GitHub install.packages(\"devtools\") library(devtools) install_github(\"silvia-eckert/microdiluteR\") library(microdiluteR)"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Tidy photometer data with `tidy_plates()`","text":"show general workflow, use example data shipped microdiluteR package. use cases relying real-world data, please check upcoming vignettes. example data used list multiple photometer measurements 96-well plates. data also contains information experimental setup, can retrieved using attribute: can see plate loaded horizontal direction (rows starting -H) denoted ‘plate_axis’ column. can also see four treatment levels (10%, 30%, 100%, negative control level), tested two concentrations (100 ppm 200 ppm). next step, try add metadata absorption values measured. can also get details experimental setup using help page data set:","code":"data(\"bma\") names(bma) # check file names #> [1] \"bma_grp1_exp2_T0\" \"bma_grp1_exp2_T3\" \"bma_grp2_exp1_T0\" \"bma_grp2_exp1_T3\" bma[[1]] # absorption values from first plate #>       1     2     3     4     5     6     7     8     9    10    11    12 #> A 0.342 0.354 0.360 0.360 0.352 0.363 0.361 0.352 0.356 0.351 0.366 0.375 #> B 0.362 0.391 0.375 0.363 0.383 0.366 0.380 0.378 0.339 0.387 0.377 0.362 #> C 0.344 0.346 0.345 0.347 0.350 0.356 0.348 0.343 0.348 0.351 0.351 0.353 #> D 0.361 0.367 0.351 0.364 0.353 0.362 0.361 0.367 0.363 0.356 0.357 0.355 #> E 0.388 0.473 0.400 0.358 0.388 0.340 0.335 0.396 0.411 0.404 0.397 0.407 #> F 0.456 0.465 0.469 0.469 0.462 0.468 0.455 0.477 0.487 0.488 0.498 0.471 #> G 0.334 0.340 0.357 0.332 0.329 0.342 0.333 0.317 0.360 0.332 0.335 0.328 #> H 0.334 0.332 0.339 0.333 0.339 0.334 0.342 0.335 0.361 0.327 0.330 0.341 attr(bma, \"metadata\") # check out the experimental setup #>   plate_axis treatment concentration #> 1          A       10%       100 ppm #> 2          B       10%       200 ppm #> 3          C       30%       100 ppm #> 4          D       30%       200 ppm #> 5          E      100%       100 ppm #> 6          F      100%       200 ppm #> 7          G   Control       100 ppm #> 8          H   Control       200 ppm ?bma # check out details on the experimental setup"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"read-plates","dir":"Articles","previous_headings":"Usage","what":"Read plates","title":"Tidy photometer data with `tidy_plates()`","text":"dive magic tidy_plates() function, let’s first look read_plate() read_plates() functions. adding metadata desired photometer data loaded R inspection custom analyses, can achieved read_plate() read_plates() functions. Let’s first create temporary mock file: Now ’ll read file using read_plate() follows: also multiple files using read_plates() function. content files concatenated single list ready processing, e.g. tidy_plates() function. Let’s create two temporary files. time, however, use custom pattern called “Assay_” start file names. make sure two files considered temporary directory. Now ’ll apply read_plates() function similarly read_plate() follows: functions purely inspection custom use. add metadata, function necessary users can directly apply tidy_plates() function either single files, folder pointing single multiple files (using custom patterns necessary) lists photometer data already loaded R (read_plate(), read_plates() function long list structure preserved).","code":"data <- \"Line with additional information, e.g. wavelength     1  2  3  4  5  6  7  8  9 10 11 12 A  1  2  3  4  5  6  7  8  9 10 11 12 B 13 14 15 16 17 18 19 20 21 22 23 24 C 25 26 27 28 29 30 31 32 33 34 35 36 D 37 38 39 40 41 42 43 44 45 46 47 48 E 49 50 51 52 53 54 55 56 57 58 59 60 F 61 62 63 64 65 66 67 68 69 70 71 72 G 73 74 75 76 77 78 79 80 81 82 83 84 H 85 86 87 88 89 90 91 92 93 94 95 96\" file_path <- tempfile() writeLines(data, file_path, sep = \"\\n\") temp_file <- read_plate(file_path,                         skip_lines = 2) # skip the first two lines temp_file #>    1  2  3  4  5  6  7  8  9 10 11 12 #> A  1  2  3  4  5  6  7  8  9 10 11 12 #> B 13 14 15 16 17 18 19 20 21 22 23 24 #> C 25 26 27 28 29 30 31 32 33 34 35 36 #> D 37 38 39 40 41 42 43 44 45 46 47 48 #> E 49 50 51 52 53 54 55 56 57 58 59 60 #> F 61 62 63 64 65 66 67 68 69 70 71 72 #> G 73 74 75 76 77 78 79 80 81 82 83 84 #> H 85 86 87 88 89 90 91 92 93 94 95 96 # The skipped lines are stored here attr(temp_file, \"info\") #> [1] \"Line with additional information, e.g. wavelength\" # Remove the temporary file unlink(file_path) # File 1 data_T0 <- \"Line with additional information, e.g. wavelength     1  2  3  4  5  6  7  8  9 10 11 12 A  1  2  3  4  5  6  7  8  9 10 11 12 B 13 14 15 16 17 18 19 20 21 22 23 24 C 25 26 27 28 29 30 31 32 33 34 35 36 D 37 38 39 40 41 42 43 44 45 46 47 48 E 49 50 51 52 53 54 55 56 57 58 59 60 F 61 62 63 64 65 66 67 68 69 70 71 72 G 73 74 75 76 77 78 79 80 81 82 83 84 H 85 86 87 88 89 90 91 92 93 94 95 96\" file_path_T0 <- tempfile(pattern = \"Assay_T0_\",                          fileext = \".txt\") writeLines(data_T0, file_path_T0, sep = \"\\n\") # File 2 data_T1 <- \"Line with additional information, e.g. wavelength     1  2  3  4  5  6  7  8  9 10 11 12 A  1  2  3  4  5  6  7  8  9 10 11 12 B 13 14 15 16 17 18 19 20 21 22 23 24 C 25 26 27 28 29 30 31 32 33 34 35 36 D 37 38 39 40 41 42 43 44 45 46 47 48 E 49 50 51 52 53 54 55 56 57 58 59 60 F 61 62 63 64 65 66 67 68 69 70 71 72 G 73 74 75 76 77 78 79 80 81 82 83 84 H 85 86 87 88 89 90 91 92 93 94 95 96\" file_path_T1 <- tempfile(pattern = \"Assay_T1_\",                          fileext = \".txt\") writeLines(data_T1, file_path_T1, sep = \"\\n\") file_dir <- dirname(file_path_T1) temp_files <- read_plates(file_dir,                         pattern = \"Assay_T\", # our custom pattern                         skip_lines = 2) # skip the first two lines temp_files #> $Assay_T0_198952bfb458 #>    1  2  3  4  5  6  7  8  9 10 11 12 #> A  1  2  3  4  5  6  7  8  9 10 11 12 #> B 13 14 15 16 17 18 19 20 21 22 23 24 #> C 25 26 27 28 29 30 31 32 33 34 35 36 #> D 37 38 39 40 41 42 43 44 45 46 47 48 #> E 49 50 51 52 53 54 55 56 57 58 59 60 #> F 61 62 63 64 65 66 67 68 69 70 71 72 #> G 73 74 75 76 77 78 79 80 81 82 83 84 #> H 85 86 87 88 89 90 91 92 93 94 95 96 #>  #> $Assay_T1_19895886dba6 #>    1  2  3  4  5  6  7  8  9 10 11 12 #> A  1  2  3  4  5  6  7  8  9 10 11 12 #> B 13 14 15 16 17 18 19 20 21 22 23 24 #> C 25 26 27 28 29 30 31 32 33 34 35 36 #> D 37 38 39 40 41 42 43 44 45 46 47 48 #> E 49 50 51 52 53 54 55 56 57 58 59 60 #> F 61 62 63 64 65 66 67 68 69 70 71 72 #> G 73 74 75 76 77 78 79 80 81 82 83 84 #> H 85 86 87 88 89 90 91 92 93 94 95 96 #>  #> attr(,\"info\") #>               File_name                                         Attribute #> 1 Assay_T0_198952bfb458 Line with additional information, e.g. wavelength #> 2 Assay_T1_19895886dba6 Line with additional information, e.g. wavelength # Remove temporary files unlink(file_path_T0)  unlink(file_path_T1)"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"tidy-data-from-a-single-plate","dir":"Articles","previous_headings":"Usage","what":"Tidy data from a single plate","title":"Tidy photometer data with `tidy_plates()`","text":"Tidying data single photometer plate straightforward. Simply provide input data tidy_plates(), set desired metadata handle rest. input data can file name, folder pointing file (given interfering files, else use pattern) list element already read R. , use first data set bma apply metadata provided attributes: see also provided group identifier experiment name. necessary , update code denote e.g. pathogen used test organism (Botrytis cinerea) group identifier give plate measurement experiment name (e.g. “Assay 1”). Let’s : resulting tidy table looks follows: see timepoint added automatically didn’t specify explicitely. ’s timepoint extracted file name ‘bma_grp1_exp1_T0”. file name also contains ’bma’, ‘grp1’ ‘exp1’ identifiers. become important next section several plates read.","code":"single_plate_data <- bma[1]; single_plate_data #> $bma_grp1_exp2_T0 #>       1     2     3     4     5     6     7     8     9    10    11    12 #> A 0.342 0.354 0.360 0.360 0.352 0.363 0.361 0.352 0.356 0.351 0.366 0.375 #> B 0.362 0.391 0.375 0.363 0.383 0.366 0.380 0.378 0.339 0.387 0.377 0.362 #> C 0.344 0.346 0.345 0.347 0.350 0.356 0.348 0.343 0.348 0.351 0.351 0.353 #> D 0.361 0.367 0.351 0.364 0.353 0.362 0.361 0.367 0.363 0.356 0.357 0.355 #> E 0.388 0.473 0.400 0.358 0.388 0.340 0.335 0.396 0.411 0.404 0.397 0.407 #> F 0.456 0.465 0.469 0.469 0.462 0.468 0.455 0.477 0.487 0.488 0.498 0.471 #> G 0.334 0.340 0.357 0.332 0.329 0.342 0.333 0.317 0.360 0.332 0.335 0.328 #> H 0.334 0.332 0.339 0.333 0.339 0.334 0.342 0.335 0.361 0.327 0.330 0.341 tidy_df <- tidy_plates(single_plate_data,                        how_many = \"single\", # tidy single plate                        direction = \"horizontal\",                        group_ID = NA,                        experiment_name = NA,                        validity_method = \"threshold\",                        threshold = 1,                        treatment_labels = rep(c(\"10%\", \"30%\", \"100%\", \"Control\"), each = 2),                        concentration_levels = rep(c(100, 200), 4)) # numeric tidy_df <- tidy_plates(single_plate_data,                        how_many = \"single\",                        direction = \"horizontal\",                        group_ID = \"Botrytis cinerea\", # add test organism                        experiment_name = \"Assay 1\", # add plate name                        validity_method = \"threshold\",                        threshold = 1,                        treatment_labels = rep(c(\"10%\", \"30%\", \"100%\", \"Control\"), each = 2),                        concentration_levels = rep(c(100, 200), 4)) knitr::kable(head(tidy_df, 10))"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"prepare-file-names","dir":"Articles","previous_headings":"Usage","what":"Prepare file names","title":"Tidy photometer data with `tidy_plates()`","text":"easiest way prepare files use tidy_plates() function add pattern beginning file names. Simply use beginning file name leave rest file name unchanged make sure still know file . look file names bma dataset, see specific pattern including ‘grp1’, ‘grp2’, ‘exp1’, ‘exp2’, well timepoints (‘T0’ ‘T1’). patterns necessary tidy_plates() correctly assign group experiment names. example, repeated experiment -mentioned plate called ‘Assay 1’ used concentrations even chemicals antibiotics, now using ‘Assay 2’ experiment name plate. Additionally, also repeated experiments another test organism, e.g. Penicillium digitatum instead B. cinerea. Adding plate data measurements second test organism, need specify group name. assign identifier “grp1” files experiments B. cinerea, identifier “grp2” files experiments P. digitatum (experiments test organisms). applies, multiple experiments test organisms, “exp1” stands first set-“exp2” second set-. plates measured multiple times, time point identifier required, either T0 (T1, …) t0 (t1, …). files “BMA” “bma” (stands ‘broth microdilution assay’ user-defined pattern “Assay_” also fine) beginning name distinguish files located folder. may sound bit tedious, partially rename files, helps lot identify different groups experiments. Photometers often provide cryptic file names, consisting combination letters sequence numbers just date measurement, renaming often necessary sake clarity anyway. following table illustrates example renaming strategy: bma example data, following file names: means, two groups, one experiment per group, experiment measured timepoint T0 T3.","code":"names(bma) #> [1] \"bma_grp1_exp2_T0\" \"bma_grp1_exp2_T3\" \"bma_grp2_exp1_T0\" \"bma_grp2_exp1_T3\""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"tidy-data-from-multiple-plates-with-a-common-experimental-setup","dir":"Articles","previous_headings":"Usage","what":"Tidy data from multiple plates with a common experimental setup","title":"Tidy photometer data with `tidy_plates()`","text":"Since measurements bma performed common treatment concentration setting, apply metadata . case, need specify want clean multiple plates.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"tidy-via-function-parameters","dir":"Articles","previous_headings":"Usage > Tidy data from multiple plates with a common experimental setup","what":"Tidy via function parameters","title":"Tidy photometer data with `tidy_plates()`","text":"function tidy_plates() offers options add metadata depends preference user option feels convenient. Users free add metadata either parameters via user prompts. first, use parameters : Let’s look resulting table: Keep mind naming strategy performed sequentially. means , example, ‘Assay 1’ applied identifier ‘exp1’. since files second group, P. digitatum, contain ‘exp1’ identifier, experiments P. digitatum assigned ‘Assay 1’ experiments B. cinerea assigned ‘Assay 2’.","code":"multiple_plates_data <- bma tidy_dfs <- tidy_plates(   multiple_plates_data,   how_many = \"multiple\", # changed from \"single\"   direction = \"horizontal\",   group_ID = c(\"Botrytis cinerea\", \"P. digitatum\"), # additional group added   experiment_name = c(\"Assay 1\", \"Assay 2\"), # additional experiment added   validity_method = \"threshold\",   threshold = 1,   treatment_labels = rep(c(\"10%\", \"30%\", \"100%\", \"Control\"), each = 2),   concentration_levels = rep(c(100, 200), 4)   ) knitr::kable(head(tidy_dfs, 10))"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"tidy-via-user-prompts","dir":"Articles","previous_headings":"Usage > Tidy data from multiple plates with a common experimental setup","what":"Tidy via user prompts","title":"Tidy photometer data with `tidy_plates()`","text":"Another way add metadata prompt user. way, part, group name concentration level, queried turn. processing user prompts, can check options give result settings used input:","code":"tidy_dfs_prompts <- tidy_plates(   multiple_plates_data,   how_many = \"multiple\", # changed from \"single\"   user_prompt = T, # set user prompt option to TRUE   direction = \"horizontal\",   ) identical(tidy_dfs, tidy_dfs_prompts) # should be TRUE"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"tidy-data-from-multiple-plates-with-different-experimental-setups","dir":"Articles","previous_headings":"Usage","what":"Tidy data from multiple plates with different experimental setups","title":"Tidy photometer data with `tidy_plates()`","text":"gets complicated group experiment () individual experimental set-? still want common table processing? Don’t worry, tidy_plates() can handle . case, user prompted experimental setup every plate separately.","code":"tidy_dfs_individually <- tidy_plates(   multiple_plates_data,   how_many = \"multiple\",   user_prompt = T,   multiple_structures = T # set to TRUE to handle plates individually   direction = \"horizontal\",   )"},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"further-data-processing-options","dir":"Articles","previous_headings":"","what":"Further data processing options","title":"Tidy photometer data with `tidy_plates()`","text":"vignette shows add metadata photometer files plain text format. However, certainly analysis pipeline ends. microdiluteR package offer, covered vignettes R package: Validation samples using either thresholds manually specifying invalid samples validate_cells() update_validity() functions, include visual inspection. Usage data cleaning subtract_T0() function. Calculate summarize growth performance across multiple timepoints via calculate_growth_performance() summarize_growth_performance() functions. Applying sign test assess whether growth performance significantly differs baseline (usually control) using apply_sign_test() function. Visualize results, without sign test results asterisk notation, using plot_growth_performance() function.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/articles/tidy_photometer_data.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Tidy photometer data with `tidy_plates()`","text":"microdiluteR1 package possible without tidyverse network, usethis testthat packages, answers amazing stackoverflow community helped constantly improve code (save lot nerves, especially tidy evaluation).","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Silvia Eckert. Author, maintainer.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eckert S (2024). microdiluteR: Analysis Broth Microdilution Assays. R package version 1.0.1, https://silvia-eckert.github.io/microdiluteR/.","code":"@Manual{,   title = {microdiluteR: Analysis of Broth Microdilution Assays},   author = {Silvia Eckert},   year = {2024},   note = {R package version 1.0.1},   url = {https://silvia-eckert.github.io/microdiluteR/}, }"},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/index.html","id":"notebook-background","dir":"","previous_headings":"","what":"📓 Background","title":"Analysis of Broth Microdilution Assays","text":"microdiluteR package designed help researchers tidy data photometer plates provides functions easily add metadata, regardless whether user processing single plate multiple plates complex metadata structures. package developed special focus analysis broth microdilution assays. detailed tutorial can found page.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/index.html","id":"floppy_disk-installation","dir":"","previous_headings":"","what":"💾 Installation","title":"Analysis of Broth Microdilution Assays","text":"can install development version microdiluteR GitHub :","code":"# install.packages(\"devtools\") # if not installed already devtools::install_github(\"silvia-eckert/microdiluteR\")"},{"path":"https://silvia-eckert.github.io/microdiluteR/index.html","id":"joystick-usage","dir":"","previous_headings":"","what":"🕹️ Usage","title":"Analysis of Broth Microdilution Assays","text":"can load microdiluteR follows: Let’s try main function tidy_plates() example data: example data, corresponding metadata stored attribute: Let’s add metadata create tidy data frame processing: snippet resulting table… … table structure:","code":"library(microdiluteR) library(dplyr) data(bma) bma[1] # file name is bma_grp1_exp2_T0 #> $bma_grp1_exp2_T0 #>       1     2     3     4     5     6     7     8     9    10    11    12 #> A 0.342 0.354 0.360 0.360 0.352 0.363 0.361 0.352 0.356 0.351 0.366 0.375 #> B 0.362 0.391 0.375 0.363 0.383 0.366 0.380 0.378 0.339 0.387 0.377 0.362 #> C 0.344 0.346 0.345 0.347 0.350 0.356 0.348 0.343 0.348 0.351 0.351 0.353 #> D 0.361 0.367 0.351 0.364 0.353 0.362 0.361 0.367 0.363 0.356 0.357 0.355 #> E 0.388 0.473 0.400 0.358 0.388 0.340 0.335 0.396 0.411 0.404 0.397 0.407 #> F 0.456 0.465 0.469 0.469 0.462 0.468 0.455 0.477 0.487 0.488 0.498 0.471 #> G 0.334 0.340 0.357 0.332 0.329 0.342 0.333 0.317 0.360 0.332 0.335 0.328 #> H 0.334 0.332 0.339 0.333 0.339 0.334 0.342 0.335 0.361 0.327 0.330 0.341 attr(bma, \"metadata\") #>   plate_axis treatment concentration #> 1          A       10%       100 ppm #> 2          B       10%       200 ppm #> 3          C       30%       100 ppm #> 4          D       30%       200 ppm #> 5          E      100%       100 ppm #> 6          F      100%       200 ppm #> 7          G   Control       100 ppm #> 8          H   Control       200 ppm tidy_data <- tidy_plates(bma[1],                          how_many = \"single\",                          direction = \"horizontal\",                          validity_method = \"threshold\",                          threshold = 0.355, # values above this are set as invalid                          group_ID = \"Group 1\", # optional                          experiment_name = \"Experiment A\", # optional                          treatment_labels = rep(c(\"10%\", \"30%\", \"100%\", \"Control\"), each = 2),                          concentration_levels = rep(c(100,200), times = 4)) %>%    dplyr::rename(Pos = Position,                 Val = Value,                 Treat = Treatment,                 Conc = Concentration,                 TP = Timepoint) # rename some columns for convenience tidy_data #> # A tibble: 96 × 9 #>    Pos     Val Validity Treat  Conc TP    File             Group   Experiment   #>    <chr> <dbl> <chr>    <chr> <dbl> <chr> <chr>            <chr>   <chr>        #>  1 A-1   0.342 valid    10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  2 A-2   0.354 valid    10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  3 A-3   0.36  invalid  10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  4 A-4   0.36  invalid  10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  5 A-5   0.352 valid    10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  6 A-6   0.363 invalid  10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  7 A-7   0.361 invalid  10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  8 A-8   0.352 valid    10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #>  9 A-9   0.356 invalid  10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #> 10 A-10  0.351 valid    10%     100 T0    bma_grp1_exp2_T0 Group 1 Experiment A #> # ℹ 86 more rows str(tidy_data) #> tibble [96 × 9] (S3: tbl_df/tbl/data.frame) #>  $ Pos       : chr [1:96] \"A-1\" \"A-2\" \"A-3\" \"A-4\" ... #>  $ Val       : num [1:96] 0.342 0.354 0.36 0.36 0.352 0.363 0.361 0.352 0.356 0.351 ... #>  $ Validity  : chr [1:96] \"valid\" \"valid\" \"invalid\" \"invalid\" ... #>  $ Treat     : chr [1:96] \"10%\" \"10%\" \"10%\" \"10%\" ... #>  $ Conc      : num [1:96] 100 100 100 100 100 100 100 100 100 100 ... #>  $ TP        : chr [1:96] \"T0\" \"T0\" \"T0\" \"T0\" ... #>  $ File      : chr [1:96] \"bma_grp1_exp2_T0\" \"bma_grp1_exp2_T0\" \"bma_grp1_exp2_T0\" \"bma_grp1_exp2_T0\" ... #>  $ Group     : chr [1:96] \"Group 1\" \"Group 1\" \"Group 1\" \"Group 1\" ... #>  $ Experiment: chr [1:96] \"Experiment A\" \"Experiment A\" \"Experiment A\" \"Experiment A\" ..."},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_concentration.html","id":null,"dir":"Reference","previous_headings":"","what":"Add concentration metadata — add_concentration","title":"Add concentration metadata — add_concentration","text":"add_concentration adds concentration metadata photometer data specified long format. function work properly, column containing well positions named 'Position' column containing corresponding absorption values named 'Values'. generate_concentration_list generates list provided concentration levels mapped user-specified plate layout. plate layout based 96-well plate can either horizontal (.e. letters -H) vertical (.e. numbers 1-12). ask_concentration_list works way generate_concentration_list, retrieves concentration levels based user prompt instead user-set parameters. plate axis can either horizontal direction providing letters -H vertical direction providing numbers 1-12 based 96-well plate layout. match_concentration maps concentration levels corresponding well positions returns 'NA' otherwise.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_concentration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add concentration metadata — add_concentration","text":"","code":"add_concentration(   input_data,   concentration_list = NULL,   ask_concentration_list = TRUE,   ... )  generate_concentration_list(concentration_levels, direction)  ask_concentration_list(direction = c(\"horizontal\", \"vertical\"))  match_concentration(well_position, concentration_list)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_concentration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add concentration metadata — add_concentration","text":"input_data data frame well positions corresponding values. concentration_list list containing concentration information ask_concentration_list boolean parameter indicating whether concentration levels retrieved via user prompt (default) . ... Additional arguments passed ask_concentration_list. concentration_levels numeric vector containing concentration levels. direction character vector specifying orientation plate layout.  can either \"horizontal\" \"vertical\". well_position sample position(s) check","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_concentration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add concentration metadata — add_concentration","text":"add_concentration returns data frame concentration metadata added. generate_concentration_list returns list concentration levels level assigned corresponding          row column based selected direction parameter. ask_concentration_list returns list containing plate axes keys concentration information values. match_concentration returns corresponding concentration level sample position matches concentration criteria, \"NA\" otherwise","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_concentration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add concentration metadata — add_concentration","text":"generate_concentration_list checks length concentration_levels matches specified  number rows columns based direction parameter. , throws error. lengths match, generates list concentration levels level  assigned corresponding row column based direction parameter.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_treatment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add treatment metadata — add_treatment","title":"Add treatment metadata — add_treatment","text":"add_treatment adds treatment metadata photometer data specified long format. function work properly, column containing well positions named 'Position' column containing corresponding absorption values named 'Values'. generate_treatment_list generates list provided treatment labels mapped user-specified plate layout. plate layout based 96-well plate can either horizontal (.e. letters -H) vertical (.e. numbers 1-12). ask_treatment_list works way generate_treatment_list, retrieves treatment labels based user prompt instead user-set parameters. plate axis can either horizontal direction providing letters -H vertical direction providing numbers 1-12 based 96-well plate layout. match_treatment maps treatment labels corresponding well positions returns 'NA' otherwise.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_treatment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add treatment metadata — add_treatment","text":"","code":"add_treatment(   input_data,   treatment_list = NULL,   ask_treatment_list = TRUE,   ... )  generate_treatment_list(treatment_labels, direction)  ask_treatment_list(direction = c(\"horizontal\", \"vertical\"))  match_treatment(well_position, treatment_list)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_treatment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add treatment metadata — add_treatment","text":"input_data data frame well positions corresponding values. treatment_list list containing treatment information ask_treatment_list boolean parameter indicating whether treatment labels retrieved via user prompt (default) . ... Additional arguments passed ask_treatment_list. treatment_labels character vector containing treatment labels. direction character vector specifying orientation plate layout.  can either \"horizontal\" \"vertical\". well_position sample position(s) check","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_treatment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add treatment metadata — add_treatment","text":"add_treatment returns data frame treatment information added. generate_treatment_list returns list treatment labels level assigned corresponding          row column based selected direction parameter. ask_treatment_list returns list containing plate axes keys treatment labels values. match_treatment returns corresponding treatment labels sample position matches treatment criteria, \"NA\" otherwise","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/add_treatment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add treatment metadata — add_treatment","text":"generate_treatment_list checks length treatment_labels matches specified  number rows columns based direction parameter. , throws error. lengths match, generates list treatment_labels label  assigned corresponding row column based direction parameter.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/apply_sign_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply sign test — apply_sign_test","title":"Apply sign test — apply_sign_test","text":"function applies one-sample sign test input data grouped specified variables.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/apply_sign_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply sign test — apply_sign_test","text":"","code":"apply_sign_test(   stats_data,   summarized_data,   value = \"Value\",   p.signif = \"p.signif\",   grouping = NULL,   na = \"NA\" )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/apply_sign_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply sign test — apply_sign_test","text":"stats_data data frame containing calculated growth performance data, e.g. via function call calculate_growth_performance. summarized_data data frame containing corresponding summarized data, e.g. via function call summarize_growth_performance. value column containing absorption values tested. Defaults 'Value'. p.signif column containing significance denoted asterisk notation. Defaults 'p.signif'. grouping character vector specifying grouping variables. na character value specifying keyword display sign tests applied subsets data (e.g. small sample sizes). Defaults \"NA\".","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/apply_sign_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply sign test — apply_sign_test","text":"data frame containing summarized data sign test results added.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/bma.html","id":null,"dir":"Reference","previous_headings":"","what":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","title":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","text":"list six sample data sets absorption values broth microdilution assays 96-well plates, applied two groups one experiment two time points T0 T3.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/bma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","text":"","code":"bma"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/bma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","text":"list six data frames: bma_grp1_exp2_T0 Absorption values broth microdilution assay      applied group 1 experiment 2 96-well plate timepoint T0. bma_grp1_exp2_T3 Absorption values broth microdilution assay      applied group 1 experiment 2 96-well plate timepoint T3. bma_grp2_exp1_T0 Absorption values broth microdilution assay      applied group 2 experiment 1 96-well plate timepoint T0. bma_grp2_exp1_T3 Absorption values broth microdilution assay      applied group 2 experiment 1 96-well plate timepoint T3.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/bma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","text":"data derived two broth microdilution assay experiments testing growth performance Botrytis cinerea conidia two Tanacetum vulgare chemotypes (defined groups). Leaf extracts chemotypes fractionated using solid-phase extraction water-methanol polarity gradient (defined treatment) fractions subjected assays two concentrations (100 ppm 200 ppm) plus positive control concentration level. 96-well plate design assigned horizontal direction (provided plate_axis) stored metadata attribute list. data generated teaching purposes unrestricted licensing constraints.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/bma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absorption values from six broth microdilution assays conducted on 96-well plates — bma","text":"","code":"data(bma) attr(bma, \"metadata\") #>   plate_axis treatment concentration #> 1          A       10%       100 ppm #> 2          B       10%       200 ppm #> 3          C       30%       100 ppm #> 4          D       30%       200 ppm #> 5          E      100%       100 ppm #> 6          F      100%       200 ppm #> 7          G   Control       100 ppm #> 8          H   Control       200 ppm"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/calculate_growth_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and visualize growth performance — calculate_growth_performance","title":"Calculate and visualize growth performance — calculate_growth_performance","text":"calculate_growth_performance standardizes data subtracting average value control group treatment level concentration level, applied within experiment. assumes input data data frame columns 'Experiment', 'Concentration', 'Treatment',  'Value', 'Concentration' represents different concentration levels, 'Treatment' represents different  treatment groups, 'Value' represents corresponding absorption values. calculate_percentage_change calculates percentage change vector values (single value) reference value baseline. value vector less reference, returns negative percentage difference; otherwise, returns positive percentage difference. summarize_growth_performance summarizes data frame containing growth performance computing mean either standard error standard deviation. plot_growth_performance visualizes growth performance using bar charts error bars.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/calculate_growth_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and visualize growth performance — calculate_growth_performance","text":"","code":"calculate_growth_performance(   input_data,   treatment_grouping = FALSE,   concentration_grouping = FALSE,   group = \"Group\",   experiment = \"Experiment\",   treatment = \"Treatment\",   concentration = \"Concentration\",   timepoint = \"Timepoint\",   value = \"Value\",   control_mean = \"control_mean\" )  calculate_percentage_change(input, reference)  summarize_growth_performance(   input_data,   compute_sd = FALSE,   grouping = c(\"Group\", \"Treatment\", \"Concentration\", \"Timepoint\"),   treatment = \"Treatment\",   value = \"Value\" )  plot_growth_performance(   input_data,   stats_data = NULL,   level_unit = NULL,   treatment_order = NULL,   apply_sign_test = FALSE,   grouping = NULL,   x_var = \"Treatment\",   y_var = \"mean\",   error_var = \"stderr\",   x_lab = \"Treatment\",   y_lab = NULL,   fill_var = \"Concentration\",   row_facets = NULL,   col_facets = \"Group\",   value = \"Value\",   p_values = \"p.signif\",   level_colors = NULL,   ... )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/calculate_growth_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and visualize growth performance — calculate_growth_performance","text":"input_data data frame containing summarized data, e.g. function call summarize_growth_performance. treatment_grouping Boolean value specifies whether (default) treatment grouping within plate. concentration_grouping Boolean value specifies whether (default) concentration grouping within plate. group column containing group information. Defaults 'Group'. experiment column containing experiment information. Defaults 'Experiment'. hierarchy group > experiment, .e. within single group, might several experiments taking place (e.g. multiple extracts plant species tested plant species group type extract experiment). treatment column containing treatment information. Defaults 'Treatment'. concentration column containing concentration information. Defaults 'Concentration'. timepoint column containing timepoint information. Defaults 'Timepoint'. value column containing absorption values assessed via apply_sign_test. Defaults 'Value'. control_mean column containing absorption values calculate growth performance. Defaults 'control_mean'. input single numeric value. reference single numeric value serving baseline comparison. compute_sd Logical, indicating whether compute standard deviation (default) standard error. grouping Optional. character vector specifying grouping variables apply sign test. specified 'apply_sign_test' set TRUE, test applied whole dataset. stats_data Optional. data frame containing growth performance data, e.g. function call calculate_growth_performance. necessary, 'apply_sign_test' parameter set TRUE. level_unit Optional. unit applied concentrations display y-axis. treatment_order Optional. alternative order factor levels x-axis. apply_sign_test Logical. sign test applied specified levels? , 'stats_data' 'grouping' parameters need specified. x_var variable name x-axis. Defaults \"Treatment\". y_var variable name y-axis. Defaults \"mean\". error_var variable name generate error bars. Defaults 'stderr'. x_lab label x-axis. Defaults \"Treatment\". y_lab Optional. label y-axis. provided return \"Relative growth performance\". fill_var variable used fill facets. Defaults \"Concentration\". row_facets character vector specifying nested column facets. Defaults NULL. col_facets character vector specifying nested row facets. Defaults \"Group\". p_values column containing (adjusted) p-values. Defaults 'p.adj.signif' function call apply_sign_test rstatix::sign_test. level_colors Optional. colors different levels. specified, determined based levels 'fill_var' using gray.colors. ... Additional arguments passed apply_sign_test.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/calculate_growth_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and visualize growth performance — calculate_growth_performance","text":"calculate_growth_performance returns modified data frame control mean subtracted treatment level concentration level, applied within experiment. calculate_percentage_change returns numeric vector containing percentage change value vector compared reference. summarize_growth_performance returns data frame containing summary statistics. plot_growth_performance returns ggplot object.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/calculate_growth_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and visualize growth performance — calculate_growth_performance","text":"plot_growth_performance uses ggplot2 create bar charts summarized data error bars.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check monotonicity of well positions across groups — check_well_positions","title":"Check monotonicity of well positions across groups — check_well_positions","text":"check_well_positions checks well positions across groups, .e. experiments, monotonically increase decrease timepoints measured. check_monotonicity checks whether values numeric vector monotonically increasing decreasing.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check monotonicity of well positions across groups — check_well_positions","text":"","code":"check_well_positions(   input_data,   x_var = \"Timepoint\",   y_var = \"Value\",   grouping = \"Position\",   v_var = \"Validity\",   wp_var = \"Position\" )  check_monotonicity(vec)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check monotonicity of well positions across groups — check_well_positions","text":"input_data data.frame containing input data, e.g. function call tidy_single_plate, tidy_plates_via_params tidy_plates_via_prompts. x_var character string specifying variable plotted x-axis. Defaults 'Timepoint'. y_var character string specifying variable plotted y-axis. Defaults 'Value'. grouping vector character strings specifying grouping variables. Defaults 'Position' grouping provided. v_var character string specifying validity information. Usually column rows 'valid'. Rows set 'invalid' based user selection. Defaults \"Validity\". wp_var character string specifying column providing well positions. Defaults \"Position\". vec numeric vector checked monotonicity.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check monotonicity of well positions across groups — check_well_positions","text":"check_well_positions returns subset input data containing data non-monotonic groups, non-monotonic groups detected. Otherwise, NULL returned. check_monotonicity returns logical value.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check monotonicity of well positions across groups — check_well_positions","text":"non-monotonic groups well positions detected, check_well_positions plots line graphs returns list corresponding subset data inspection input data adjusted invalid well positions visual inspection. check_monotonicity checks differences consecutive elements  vector 'vec' non-negative (indicating monotonic non-decreasing  behavior) non-positive (indicating monotonic non-increasing behavior).","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/check_well_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check monotonicity of well positions across groups — check_well_positions","text":"","code":"# Generate example data set.seed(123) df <- data.frame(Position = rep(1:21, 2),                  Value = c(1:21, sample(1:21,21, TRUE)),                  Timepoint = rep(paste0(\"T\",1:3),14),                  Validity = \"valid\",                  Group_1 = rep(LETTERS[1:2], each=21),                  Group_2 = rep(letters[1:14], each = 3)) # All groups behave monotonically check_well_positions(df[df$Group_1 == \"A\",],                      x_var = \"Timepoint\",                      y_var = \"Value\",                      grouping = c(\"Group_1\", \"Group_2\")) #> All groups have monotonic behavior. Returning original input data. #> Do you want to see all plots? (y/n):  #> Error in if (tolower(choice) == \"y\") {    for (group_name in names(data)) {        group <- data[[group_name]]        p <- ggplot(group, aes(x = !!sym(x_var), y = !!sym(y_var),             group = 1)) + geom_line() + geom_point(size = 5) +             labs(title = paste(\"Case:\", group_name)) + theme_minimal()        print(p)        cat(\"Press Enter to continue...\")        invisible(readLines(n = 1))    }}: argument is of length zero # Six groups behave non-monotonically check_well_positions(df[df$Group_1 == \"B\",],                      x_var = \"Timepoint\",                      y_var = \"Value\",                      grouping = c(\"Group_1\", \"Group_2\")) #> Non-monotonic well positions detected for case: B.h . Do you want to set this group as valid? (y/n):  #> Error in if (tolower(choice) == \"y\") {    cat(\"Case\", group_name, \"set as valid\\n\")    non_monotonic_groups <- non_monotonic_groups[non_monotonic_groups !=         group_name]} else {    cat(\"Continuing without changes for case:\", group_name, \"\\n\")}: argument is of length zero  # Check if a vector is monotonically increasing (will return TRUE) check_monotonicity(c(1, 2, 3, 4, 5)) #> [1] TRUE # Check if a vector is monotonically decreasing (will return FALSE) check_monotonicity(c(5, 80, 3, 2, 1)) #> [1] FALSE"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_experiment_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of experiment names from user parameters — generate_experiment_list","title":"Generate list of experiment names from user parameters — generate_experiment_list","text":"generate_experiment_list generates list provided experiment names extracted file names. ask_experiment_list works way generate_experiment_list, retrieves experiment names based user prompt instead user-set parameters.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_experiment_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of experiment names from user parameters — generate_experiment_list","text":"","code":"generate_experiment_list(experiment_names, file_list)  ask_experiment_list(file_list)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_experiment_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of experiment names from user parameters — generate_experiment_list","text":"experiment_names character vector containing names experiment. file_list character vector file IDs. Used extract experiment IDs .","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_experiment_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of experiment names from user parameters — generate_experiment_list","text":"generate_experiment_list returns list experiment names level assigned corresponding          row column based selected direction parameter. ask_experiment_list returns list containing experiment identifiers keys experiment names values.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_experiment_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate list of experiment names from user parameters — generate_experiment_list","text":"generate_experiment_list extracts unique identifiers file names matches  provided experiment names. number experiment names match number  unique identifiers extracted file names, throws error. lengths match, generates list experiment names name associated unique identifier extracted file names.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_group_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of group IDs from user parameters — generate_group_list","title":"Generate list of group IDs from user parameters — generate_group_list","text":"generate_group_list generates list provided group IDs extracted file IDs. ask_group_list works way generate_group_list, retrieves group IDs based user prompt instead user-set parameters.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_group_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of group IDs from user parameters — generate_group_list","text":"","code":"generate_group_list(group_names, file_list)  ask_group_list(file_list)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_group_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of group IDs from user parameters — generate_group_list","text":"group_names character vector containing IDs group. file_list character vector file IDs. Used extract group IDs .","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_group_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of group IDs from user parameters — generate_group_list","text":"generate_group_list returns list group IDs level assigned corresponding          row column based selected direction parameter. ask_group_list returns list containing group identifiers keys group IDs values.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/generate_group_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate list of group IDs from user parameters — generate_group_list","text":"generate_group_list extracts unique identifiers file IDs matches  provided group IDs. number group IDs match number  unique identifiers extracted file IDs, throws error. lengths match, generates list group IDs ID associated unique identifier extracted file IDs.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/read_plates.html","id":null,"dir":"Reference","previous_headings":"","what":"Read multiple text files from photometer measurement — read_plates","title":"Read multiple text files from photometer measurement — read_plates","text":"read_plates reads raw text files generated photometer measurements 96-well plates. data returned list without additional first lines sometimes used provide additional information, example, wavelength used date measurement. comparison, information saved attribute list can retrieved via \"info\" parameter. read_plate reads raw text file generated photometer measurement 96-well plate. data returned without additional first lines sometimes used provide additional information, example, wavelength used date measurement. comparison, information saved attribute raw data can retrieved via \"info\" parameter.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/read_plates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read multiple text files from photometer measurement — read_plates","text":"","code":"read_plates(input_data, pattern = NULL, skip_lines = 2)  read_plate(file_path, skip_lines = 2)"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/read_plates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read multiple text files from photometer measurement — read_plates","text":"input_data Either folder path containing raw data files list data frames. pattern character value providing file pattern search . provided, defaults \"^BMA|bma\". skip_lines numerical value specifies number lines skipped data provided. lines saved attribute accessible via \"info\" parameter. Defaults 2. file_path file path file containing raw data.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/read_plates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read multiple text files from photometer measurement — read_plates","text":"read_plates returns list data frames containing raw photometer data. read_plate returns data frame containing raw photometer data","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/subtract_T0.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtract timepoint T0 and remove from data — subtract_T0","title":"Subtract timepoint T0 and remove from data — subtract_T0","text":"function subtracts values timepoint T0 timepoints removes data.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/subtract_T0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtract timepoint T0 and remove from data — subtract_T0","text":"","code":"subtract_T0(   input_data,   grouping = c(\"Group\", \"Experiment\", \"Position\"),   value = \"Value\",   timepoint = \"Timepoint\",   validity = \"Validity\" )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/subtract_T0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtract timepoint T0 and remove from data — subtract_T0","text":"input_data data frame containing columns preferably named 'Position', 'Value',  'Experiment','Validity', 'Timepoint'. grouping character vector specifying columns use grouping. Defaults c(\"Experiment\", \"Position\"). value column containing values modified. Defaults \"Value\". timepoint column containing timepoint information. Defaults \"Timepoint\". validity column containing validity information. Defaults \"Validity\".","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/subtract_T0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtract timepoint T0 and remove from data — subtract_T0","text":"modified data frame timepoint T0 subtracted removed.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/subtract_T0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subtract timepoint T0 and remove from data — subtract_T0","text":"function modifies input data frame subtracting value  T0 timepoint timepoints plate (.e. experiment). removes rows  timepoint data frame.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata to values from photometer measurements — tidy_plates","title":"Add metadata to values from photometer measurements — tidy_plates","text":"Cleans list data frames different structures. function reads data either folder containing text files list data frames. cleans data frame using function tidy_plates_via_prompts().","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata to values from photometer measurements — tidy_plates","text":"","code":"tidy_plates(   input_data,   how_many = c(\"single\", \"multiple\"),   user_prompt = FALSE,   multiple_structures = FALSE,   direction = c(\"horizontal\", \"vertical\"),   ... )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata to values from photometer measurements — tidy_plates","text":"input_data Either folder path containing text files list data frames. how_many character vector specifying metadata added single plate multiple plates. user_prompt Logical indicating whether adding metadata applied via user prompts. applied user_prompt set TRUE. Defaults FALSE. multiple_structures Logical indicating whether adding metadata applied plate separately, plates different metadata structures. applied  via user prompts plate separately. Defaults FALSE. direction character vector specifying orientation plate layout. can either \"horizontal\" \"vertical\". ... Additional arguments passed read_plates, tidy_single_plate, tidy_plates_via_params, tidy_plates_via_prompts.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add metadata to values from photometer measurements — tidy_plates","text":"list cleaned data frames.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"function processes raw plates data photometer measurements, adds metadata via user-specified parameter values, combines processed data single data frame.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"","code":"tidy_plates_via_params(   input_data,   direction = c(\"horizontal\", \"vertical\"),   group_IDs = NULL,   experiment_names = NULL,   validity_method = c(\"threshold\", \"invalid\"),   threshold = NULL,   invalid_samples = NULL,   treatment_labels,   concentration_levels,   ... )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"input_data Either folder path containing raw data files list data frames. direction character vector specifying orientation plate layout. can either \"horizontal\" \"vertical\". group_IDs character vector providing group identifiers experiment. experiment_names character vector providing names experiment. hierarchy group > experiment, .e. within single group, might several experiments taking place (e.g. multiple extracts plant species tested plant species group type extract experiment). validity_method character vector specifying method determining cell validity.  can either \"threshold\" (.e. samples validated based common absorption maximum) \"samples\" (.e. samples manually specified invalid). threshold numeric threshold value. Applied validity_method set 'threshold'. invalid_samples character vector containing well positions (e.g. \"-3\", \"B-8\",...) invalid samples. Applied validity_method set 'samples'. treatment_labels character vector containing treatment labels. concentration_levels numeric vector containing concentration levels. ... Additional arguments passed read_plates.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"tidy tibble containing combined data metadata input plates.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"function processes photometer data multiple experiments adds metadata based user-set parameters experimental layout repeated across plates synchronized. supports two methods  determining cell validity: \"threshold\" \"invalid\". \"threshold\" method chosen, validity cell determined based specified threshold value. \"sample\" method chosen, samples specified well positions plate considered invalid. function generates lists treatments concentration levels based direction parameter, .e. direction treatments concentration levels applied (either horizontally vertically plate). plate layout , thus, metadata changes across plates, function tidy_plates_via_prompts might better choice since helps user add metadata plate separately based user prompts. one plate, metadata added, tidy_single_plate used. three functions, tidy_single_plate, tidy_plates_via_params, tidy_plates_via_prompts, work properly, file names provide file identifier (.e. \"bma\" case additional relevant files folder), group identifier (.e. starting \"grp\" followed incrementing number), identifier  experiments (starting \"exp\" followed number, e.g. \"exp1\") identifier timepoints (starting upper- lower-case letter t followed incrementing number, e.g. \"T0\" \"t0\").","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy multiple 96-well plates via parameters — tidy_plates_via_params","text":"","code":"# Load example data data(bma) # Add metadata from user parameters bma_tidy <- tidy_plates_via_params(input_data = bma,                                    direction = \"horizontal\",                                    group_IDs = paste0(\"Group_\", letters[1:2]),                                    experiment_names = c(\"Experiment 1\", \"Experiment 2\"),                                    validity_method = \"threshold\",                                    threshold = 1,                                    treatment_labels = LETTERS[1:8],                                    concentration_levels = seq(from=80, to=10, length.out=8)) bma_tidy # View tidy data #> # A tibble: 384 × 9 #>    Position Value Validity Treatment Concentration Timepoint File          Group #>    <chr>    <dbl> <chr>    <chr>             <dbl> <chr>     <chr>         <chr> #>  1 A-1      0.342 valid    A                    80 T0        bma_grp1_exp… Grou… #>  2 A-2      0.354 valid    A                    80 T0        bma_grp1_exp… Grou… #>  3 A-3      0.36  valid    A                    80 T0        bma_grp1_exp… Grou… #>  4 A-4      0.36  valid    A                    80 T0        bma_grp1_exp… Grou… #>  5 A-5      0.352 valid    A                    80 T0        bma_grp1_exp… Grou… #>  6 A-6      0.363 valid    A                    80 T0        bma_grp1_exp… Grou… #>  7 A-7      0.361 valid    A                    80 T0        bma_grp1_exp… Grou… #>  8 A-8      0.352 valid    A                    80 T0        bma_grp1_exp… Grou… #>  9 A-9      0.356 valid    A                    80 T0        bma_grp1_exp… Grou… #> 10 A-10     0.351 valid    A                    80 T0        bma_grp1_exp… Grou… #> # ℹ 374 more rows #> # ℹ 1 more variable: Experiment <chr>"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_prompts.html","id":null,"dir":"Reference","previous_headings":"","what":"Read raw photometry data and add meta data based on user input — tidy_plates_via_prompts","title":"Read raw photometry data and add meta data based on user input — tidy_plates_via_prompts","text":"old photometer devices save data plain text files. ever analysis software,  often longer available due increasing technical requirements proprietary software  generally avoided. Especially broth microdilution assays, necessary measure  photometer plates several points time, means samples represented  several files corresponding values. Usually data merged manually, can  lead mistakes takes unnecessary time. case, `tidy_plates()` function provides convenient  way read raw files , based user input, add metadata validity samples,  well treatment groups concentration levels.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_prompts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read raw photometry data and add meta data based on user input — tidy_plates_via_prompts","text":"","code":"tidy_plates_via_prompts(   input_data,   direction = c(\"horizontal\", \"vertical\"),   ... )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_prompts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read raw photometry data and add meta data based on user input — tidy_plates_via_prompts","text":"input_data folder path files containing raw photometer data. Data files  given plain text files timepoint identifiers file names (e.g. \"file_T0.txt\"  \"file_t0.txt\"). direction character vector specifying orientation plate layout. can either \"horizontal\" \"vertical\". ... Additional arguments passed read_plates.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_plates_via_prompts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read raw photometry data and add meta data based on user input — tidy_plates_via_prompts","text":"tidy data frame containing absorption values meta data (validity samples well  treatment concentration level information).","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy single 96-well plate via parameters — tidy_single_plate","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"function processes single raw 96-well plate data photometer measurement adding metadata via user-specified parameter values.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"","code":"tidy_single_plate(   input_data,   direction = c(\"horizontal\", \"vertical\"),   group_ID = NULL,   experiment_name = NULL,   validity_method = c(\"threshold\", \"invalid\"),   threshold = NULL,   invalid_samples = NULL,   treatment_labels,   concentration_levels,   ... )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"input_data Either file path data frames 8 rows 12 columns. direction character vector specifying orientation plate layout. can either \"horizontal\" \"vertical\". group_ID character vector providing group identifiers experiment. experiment_name string providing name experiment. hierarchy group > experiment, .e. within single group, might several experiments taking place (e.g. multiple extracts plant species tested plant species group type extract experiment). validity_method character vector specifying method determining cell validity.  can either \"threshold\" (.e. samples validated based common absorption maximum) \"samples\" (.e. samples manually specified invalid). threshold numeric threshold value. Applied validity_method set 'threshold'. invalid_samples character vector containing well positions (e.g. \"-3\", \"B-8\",...) invalid samples. Applied validity_method set 'samples'. treatment_labels character vector containing treatment labels. concentration_levels numeric vector containing concentration levels. ... Additional arguments passed read_plates.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"tidy tibble containing data metadata.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"function processes photometer data single measurement adds metadata based user-set parameters. supports two methods determining cell validity: \"threshold\" \"invalid\". \"threshold\" method chosen, validity cell determined based specified threshold value. \"sample\" method chosen, samples specified well positions plate considered invalid. function generates lists treatments concentration levels based direction parameter, .e. direction treatments concentration levels applied (either horizontally vertically plate). add metadata several plates time, functions tidy_plates_via_params tidy_plates_via_prompts recommended. three functions, tidy_plate, tidy_plates_via_params, tidy_plates_via_prompts, work properly, file names provide file identifier (.e. \"bma\" case additional unused files folder), identifier experiments (starting \"exp\" followed number, e.g. \"exp1\") identifier timepoints (starting upper- lower-case letter t followed number, e.g. \"T0\" \"t0\").","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/tidy_single_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy single 96-well plate via parameters — tidy_single_plate","text":"","code":"# Load example data data(bma) # Add metadata from user parameters bma_tidy <- tidy_single_plate(input_data = bma[1],                        direction = \"horizontal\",                        group_ID = \"Group A\",                        experiment_name = \"Experiment 1\",                        validity_method = \"threshold\",                        threshold = 1,                        treatment_labels = LETTERS[1:8],                        concentration_levels = seq(from=80, to=10, length.out=8)) bma_tidy # View tidy data #> # A tibble: 96 × 9 #>    Position Value Validity Treatment Concentration Timepoint File          Group #>    <chr>    <dbl> <chr>    <chr>             <dbl> <chr>     <chr>         <chr> #>  1 A-1      0.342 valid    A                    80 T0        bma_grp1_exp… Grou… #>  2 A-2      0.354 valid    A                    80 T0        bma_grp1_exp… Grou… #>  3 A-3      0.36  valid    A                    80 T0        bma_grp1_exp… Grou… #>  4 A-4      0.36  valid    A                    80 T0        bma_grp1_exp… Grou… #>  5 A-5      0.352 valid    A                    80 T0        bma_grp1_exp… Grou… #>  6 A-6      0.363 valid    A                    80 T0        bma_grp1_exp… Grou… #>  7 A-7      0.361 valid    A                    80 T0        bma_grp1_exp… Grou… #>  8 A-8      0.352 valid    A                    80 T0        bma_grp1_exp… Grou… #>  9 A-9      0.356 valid    A                    80 T0        bma_grp1_exp… Grou… #> 10 A-10     0.351 valid    A                    80 T0        bma_grp1_exp… Grou… #> # ℹ 86 more rows #> # ℹ 1 more variable: Experiment <chr>"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/validate_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of each cell in data frame. — validate_cells","title":"Check validity of each cell in data frame. — validate_cells","text":"validate_cells checks samples valid based either user-set threshold (.e. maximum absorption value) list invalid samples provided user. apply_validation_method evaluates whether sample meets user-set validity criteria based  specified validity method. ask_validity_method applies user prompt check validation method apply samples. can either 'threshold' (maximum absorption value asked via call function ask_threshold) 'samples' ask_threshold applies user prompt check valid absorption maximum used threshold. ask_invalid_samples applies user prompt check invalid samples. update_validity updates Validity column dataframe based specified position combinations factors. sets Validity \"invalid\" rows Position matches specified position combinations factors , B, C match provided group levels.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/validate_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of each cell in data frame. — validate_cells","text":"","code":"validate_cells(   raw_data,   row_names,   col_names,   validity_method = c(\"threshold\", \"samples\"),   threshold = NULL,   invalid_samples = NULL )  apply_validation_method(   value,   i,   j,   row_names,   col_names,   validity_method = c(\"threshold\", \"samples\"),   threshold = NULL,   invalid_samples = NULL )  ask_validity_method()  ask_threshold()  ask_invalid_samples()  update_validity(   input_data,   wp_var = \"Position\",   well_positions,   group_levels = NULL )"},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/validate_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of each cell in data frame. — validate_cells","text":"raw_data original data frame. row_names Names identifiers rows matrix data frame. col_names Names identifiers columns matrix data frame. validity_method method used determine validity. Either 'threshold' 'samples'. threshold threshold value used determining validity. applied 'validity_method set 'threshold'. invalid_samples container storing invalid samples indices. applied 'validity_method set 'samples'. value value checked validity. row index value matrix data frame. j column index value matrix data frame. input_data dataframe containing data updated. wp_var character string specifying column providing well positions. Defaults \"Position\". well_positions well positions filter data . group_levels list specifying combinations factors , B, C match. element list vector factor levels.","code":""},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/validate_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of each cell in data frame. — validate_cells","text":"validate_cells returns data frame validity information apply_validation_method returns logical value indicating whether value meets validity criteria. user's validity method preference ask_threshold returns user-specified threshold ask_invalid_samples returns vector invalid samples update_validity returns updated dataframe Validity modified accordingly.","code":""},{"path":[]},{"path":"https://silvia-eckert.github.io/microdiluteR/reference/validate_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check validity of each cell in data frame. — validate_cells","text":"","code":"df <- data.frame(Position = c(\"pos1\", \"pos2\", \"pos2\", \"pos4\", \"pos4\"),                  Value = c(1, 2, 3, 4, 5),                  Validity = c(\"valid\", \"valid\", \"valid\", \"valid\", \"valid\"),                  A = c(\"a1\", \"a2\", \"a3\", \"a1\", \"a2\"),                  B = c(\"b1\", \"b2\", \"b3\", \"b1\", \"b2\"),                  C = c(\"c1\", \"c2\", \"c3\", \"c1\", \"c2\")) updated_df <- update_validity(df,                               well_positions = \"pos2\",                               group_levels = list(A = c(\"a2\", \"a3\"), B = c(\"b2\", \"b3\"))) updated_df #>   Position Value Validity  A  B  C #> 1     pos1     1    valid a1 b1 c1 #> 2     pos2     2  invalid a2 b2 c2 #> 3     pos2     3  invalid a3 b3 c3 #> 4     pos4     4    valid a1 b1 c1 #> 5     pos4     5    valid a2 b2 c2"}]
