
R version 4.3.3 (2024-02-29 ucrt) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microdiluteR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "microdiluteR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('microdiluteR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bma")
> ### * bma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bma
> ### Title: Absorption values from six broth microdilution assays conducted
> ###   on 96-well plates
> ### Aliases: bma
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bma)
> attr(bma, "metadata")
  plate_axis treatment concentration
1          A       10%       100 ppm
2          B       10%       200 ppm
3          C       30%       100 ppm
4          D       30%       200 ppm
5          E      100%       100 ppm
6          F      100%       200 ppm
7          G   Control       100 ppm
8          H   Control       200 ppm
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check_well_positions")
> ### * check_well_positions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check_well_positions
> ### Title: Check monotonicity of well positions across groups
> ### Aliases: check_well_positions check_monotonicity
> 
> ### ** Examples
> 
> # Generate example data
> set.seed(123)
> df <- data.frame(Position = rep(1:21, 2),
+                  Value = c(1:21, sample(1:21,21, TRUE)),
+                  Timepoint = rep(paste0("T",1:3),14),
+                  Validity = "valid",
+                  Group_1 = rep(LETTERS[1:2], each=21),
+                  Group_2 = rep(letters[1:14], each = 3))
> # All groups behave monotonically
> check_well_positions(df[df$Group_1 == "A",],
+                      x_var = "Timepoint",
+                      y_var = "Value",
+                      grouping = c("Group_1", "Group_2"))
All groups have monotonic behavior. Returning original input data.
Do you want to see all plots? (y/n): # Six groups behave non-monotonically
   Position Value Timepoint Validity Group_1 Group_2
1         1     1        T1    valid       A       a
2         2     2        T2    valid       A       a
3         3     3        T3    valid       A       a
4         4     4        T1    valid       A       b
5         5     5        T2    valid       A       b
6         6     6        T3    valid       A       b
7         7     7        T1    valid       A       c
8         8     8        T2    valid       A       c
9         9     9        T3    valid       A       c
10       10    10        T1    valid       A       d
11       11    11        T2    valid       A       d
12       12    12        T3    valid       A       d
13       13    13        T1    valid       A       e
14       14    14        T2    valid       A       e
15       15    15        T3    valid       A       e
16       16    16        T1    valid       A       f
17       17    17        T2    valid       A       f
18       18    18        T3    valid       A       f
19       19    19        T1    valid       A       g
20       20    20        T2    valid       A       g
21       21    21        T3    valid       A       g
> check_well_positions(df[df$Group_1 == "B",],
+                      x_var = "Timepoint",
+                      y_var = "Value",
+                      grouping = c("Group_1", "Group_2"))
Non-monotonic well positions detected for case: B.h . Do you want to set this group as valid? (y/n): # Check if a vector is monotonically increasing (will return TRUE)
Continuing without changes for case: B.h 
Non-monotonic well positions detected for case: B.j . Do you want to set this group as valid? (y/n): check_monotonicity(c(1, 2, 3, 4, 5))
Continuing without changes for case: B.j 
Non-monotonic well positions detected for case: B.k . Do you want to set this group as valid? (y/n): # Check if a vector is monotonically decreasing (will return FALSE)
Continuing without changes for case: B.k 
Non-monotonic well positions detected for case: B.l . Do you want to set this group as valid? (y/n): check_monotonicity(c(5, 80, 3, 2, 1))
Continuing without changes for case: B.l 
Non-monotonic well positions detected for case: B.m . Do you want to set this group as valid? (y/n): 
Continuing without changes for case: B.m 
Non-monotonic well positions detected for case: B.n . Do you want to set this group as valid? (y/n): 
Continuing without changes for case: B.n 
Non-monotonic groups detected: B.h, B.j, B.k, B.l, B.m, B.n 
Returning subset of data containing non-monotonic groups.
$non_monotonic_subset
   Position Value Timepoint Validity Group_1 Group_2
22        1    15        T1  invalid       B       h
23        2    19        T2  invalid       B       h
24        3    14        T3  invalid       B       h
28        7    11        T1  invalid       B       j
29        8     5        T2  invalid       B       j
30        9    20        T3  invalid       B       j
31       10    14        T1  invalid       B       k
32       11     5        T2  invalid       B       k
33       12    19        T3  invalid       B       k
34       13     9        T1  invalid       B       l
35       14     3        T2  invalid       B       l
36       15     8        T3  invalid       B       l
37       16     7        T1  invalid       B       m
38       17    10        T2  invalid       B       m
39       18     9        T3  invalid       B       m
40       19    19        T1  invalid       B       n
41       20     4        T2  invalid       B       n
42       21    14        T3  invalid       B       n

$modified_input_data
   Position Value Timepoint Validity Group_1 Group_2
22        1    15        T1  invalid       B       h
23        2    19        T2  invalid       B       h
24        3    14        T3  invalid       B       h
25        4     3        T1    valid       B       i
26        5    10        T2    valid       B       i
27        6    18        T3    valid       B       i
28        7    11        T1  invalid       B       j
29        8     5        T2  invalid       B       j
30        9    20        T3  invalid       B       j
31       10    14        T1  invalid       B       k
32       11     5        T2  invalid       B       k
33       12    19        T3  invalid       B       k
34       13     9        T1  invalid       B       l
35       14     3        T2  invalid       B       l
36       15     8        T3  invalid       B       l
37       16     7        T1  invalid       B       m
38       17    10        T2  invalid       B       m
39       18     9        T3  invalid       B       m
40       19    19        T1  invalid       B       n
41       20     4        T2  invalid       B       n
42       21    14        T3  invalid       B       n

> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check_well_positions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tidy_plates_via_params")
> ### * tidy_plates_via_params
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tidy_plates_via_params
> ### Title: Tidy multiple 96-well plates via parameters
> ### Aliases: tidy_plates_via_params
> 
> ### ** Examples
> 
> # Load example data
> data(bma)
> # Add metadata from user parameters
> bma_tidy <- tidy_plates_via_params(input_data = bma,
+                                    direction = "horizontal",
+                                    group_IDs = paste0("Group_", letters[1:2]),
+                                    experiment_names = c("Experiment 1", "Experiment 2"),
+                                    validity_method = "threshold",
+                                    threshold = 1,
+                                    treatment_labels = LETTERS[1:8],
+                                    concentration_levels = seq(from=80, to=10, length.out=8))
> bma_tidy # View tidy data
# A tibble: 384 × 9
   Position Value Validity Treatment Concentration Timepoint File          Group
   <chr>    <dbl> <chr>    <chr>             <dbl> <chr>     <chr>         <chr>
 1 A-1      0.342 valid    A                    80 T0        bma_grp1_exp… Grou…
 2 A-2      0.354 valid    A                    80 T0        bma_grp1_exp… Grou…
 3 A-3      0.36  valid    A                    80 T0        bma_grp1_exp… Grou…
 4 A-4      0.36  valid    A                    80 T0        bma_grp1_exp… Grou…
 5 A-5      0.352 valid    A                    80 T0        bma_grp1_exp… Grou…
 6 A-6      0.363 valid    A                    80 T0        bma_grp1_exp… Grou…
 7 A-7      0.361 valid    A                    80 T0        bma_grp1_exp… Grou…
 8 A-8      0.352 valid    A                    80 T0        bma_grp1_exp… Grou…
 9 A-9      0.356 valid    A                    80 T0        bma_grp1_exp… Grou…
10 A-10     0.351 valid    A                    80 T0        bma_grp1_exp… Grou…
# ℹ 374 more rows
# ℹ 1 more variable: Experiment <chr>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tidy_plates_via_params", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tidy_single_plate")
> ### * tidy_single_plate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tidy_single_plate
> ### Title: Tidy single 96-well plate via parameters
> ### Aliases: tidy_single_plate
> 
> ### ** Examples
> 
> # Load example data
> data(bma)
> # Add metadata from user parameters
> bma_tidy <- tidy_single_plate(input_data = bma[1],
+                        direction = "horizontal",
+                        group_ID = "Group A",
+                        experiment_name = "Experiment 1",
+                        validity_method = "threshold",
+                        threshold = 1,
+                        treatment_labels = LETTERS[1:8],
+                        concentration_levels = seq(from=80, to=10, length.out=8))
> bma_tidy # View tidy data
# A tibble: 96 × 9
   Position Value Validity Treatment Concentration Timepoint File          Group
   <chr>    <dbl> <chr>    <chr>             <dbl> <chr>     <chr>         <chr>
 1 A-1      0.342 valid    A                    80 T0        bma_grp1_exp… Grou…
 2 A-2      0.354 valid    A                    80 T0        bma_grp1_exp… Grou…
 3 A-3      0.36  valid    A                    80 T0        bma_grp1_exp… Grou…
 4 A-4      0.36  valid    A                    80 T0        bma_grp1_exp… Grou…
 5 A-5      0.352 valid    A                    80 T0        bma_grp1_exp… Grou…
 6 A-6      0.363 valid    A                    80 T0        bma_grp1_exp… Grou…
 7 A-7      0.361 valid    A                    80 T0        bma_grp1_exp… Grou…
 8 A-8      0.352 valid    A                    80 T0        bma_grp1_exp… Grou…
 9 A-9      0.356 valid    A                    80 T0        bma_grp1_exp… Grou…
10 A-10     0.351 valid    A                    80 T0        bma_grp1_exp… Grou…
# ℹ 86 more rows
# ℹ 1 more variable: Experiment <chr>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tidy_single_plate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("validate_cells")
> ### * validate_cells
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: validate_cells
> ### Title: Check validity of each cell in data frame.
> ### Aliases: validate_cells apply_validation_method ask_validity_method
> ###   ask_threshold ask_invalid_samples update_validity
> 
> ### ** Examples
> 
> df <- data.frame(Position = c("pos1", "pos2", "pos2", "pos4", "pos4"),
+                  Value = c(1, 2, 3, 4, 5),
+                  Validity = c("valid", "valid", "valid", "valid", "valid"),
+                  A = c("a1", "a2", "a3", "a1", "a2"),
+                  B = c("b1", "b2", "b3", "b1", "b2"),
+                  C = c("c1", "c2", "c3", "c1", "c2"))
> updated_df <- update_validity(df,
+                               well_positions = "pos2",
+                               group_levels = list(A = c("a2", "a3"), B = c("b2", "b3")))
> updated_df
  Position Value Validity  A  B  C
1     pos1     1    valid a1 b1 c1
2     pos2     2  invalid a2 b2 c2
3     pos2     3  invalid a3 b3 c3
4     pos4     4    valid a1 b1 c1
5     pos4     5    valid a2 b2 c2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("validate_cells", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.89 0.17 2.06 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
